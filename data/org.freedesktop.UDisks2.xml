<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

<!--
 Copyright (C) 2011 David Zeuthen <zeuthen@gmail.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General
 Public License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 Boston, MA 02111-1307, USA.
-->

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.Manager:
      @short_description: Manager singleton

      Interface for top-level manager singleton object located at the
      object path <literal>/org/freedesktop/UDisks2/Manager</literal>.
  -->
  <interface name="org.freedesktop.UDisks2.Manager">
    <!-- Version: The version of the daemon currently running  -->
    <property name="Version" type="s" access="read"/>

    <!--
        LoopSetup:
        @fd: An index for the file descriptor to use.
        @options: Options - known options (in addition to <link linkend="udisks-std-options">standard options</link>) includes <parameter>offset</parameter> (of type 't'), <parameter>size</parameter> (of type 't') and <parameter>read-only</parameter> (of type 'b').
        @resulting_device: An object path to the object implementing the #org.freedesktop.UDisks2.Block interface.

        Creates a block device for the file represented by @fd.
    -->
    <method name="LoopSetup">
      <annotation name="org.gtk.GDBus.C.UnixFD" value="1"/>
      <arg name="fd" direction="in" type="h"/>
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="resulting_device" direction="out" type="o"/>
    </method>
  </interface>

  <!--
      org.freedesktop.UDisks2.Drive:
      @short_description: Disk Drive

      This interface is used to represent disk drives with or without
      removable media.

      This interface should not to be confused with the
      #org.freedesktop.UDisks2.Block interface that is used for
      low-level block devices the OS knows about. For example, if
      <filename>/dev/sda</filename> and <filename>/dev/sdb</filename>
      are block devices for two paths to the same drive, there will be
      only one #org.freedesktop.UDisks2.Drive object but two
      #org.freedesktop.UDisks2.Block objects.
  -->
  <interface name="org.freedesktop.UDisks2.Drive">
    <!-- Vendor: A name for the vendor of the drive or blank if unknown. -->
    <property name="Vendor" type="ay" access="read"/>
    <!-- Model: A name for the model of the drive or blank if unknown. -->
    <property name="Model" type="ay" access="read"/>
    <!-- Revision: Firmware Revision or blank if unknown. -->
    <property name="Revision" type="ay" access="read"/>
    <!-- Serial: Serial number of the drive or blank if unknown. -->
    <property name="Serial" type="ay" access="read"/>
    <!-- WWN:

         The <ulink
         url="http://en.wikipedia.org/wiki/World_Wide_Name">World Wide
         Name</ulink> of the drive or blank if unknown.
    -->
    <property name="WWN" type="s" access="read"/>

    <!-- Media: The kind of media currently in the drive or blank if unknown.
         See the #org.freedesktop.UDisks2.Drive:MediaCompatibility property for known values.
    -->
    <property name="Media" type="s" access="read"/>

    <!-- MediaCompatibility:
      The physical kind of media the drive uses or the type of the drive or blank if unknown.
      Known values include
      <variablelist>
      <varlistentry><term>thumb</term><listitem><para>The device is a thumb-drive with non-removable media (e.g. a USB stick)</para></listitem></varlistentry>
      <varlistentry><term>flash</term><listitem><para>Flash Card</para></listitem></varlistentry>
      <varlistentry><term>flash_cf</term><listitem><para>CompactFlash</para></listitem></varlistentry>
      <varlistentry><term>flash_ms</term><listitem><para>MemoryStick</para></listitem></varlistentry>
      <varlistentry><term>flash_sm</term><listitem><para>SmartMedia</para></listitem></varlistentry>
      <varlistentry><term>flash_sd</term><listitem><para>Secure Digital</para></listitem></varlistentry>
      <varlistentry><term>flash_sdhc</term><listitem><para>Secure Digital High Capacity</para></listitem></varlistentry>
      <varlistentry><term>flash_sdxc</term><listitem><para>Secure Digital eXtended Capacity</para></listitem></varlistentry>
      <varlistentry><term>flash_mmc</term><listitem><para>MultiMediaCard</para></listitem></varlistentry>
      <varlistentry><term>floppy</term><listitem><para>Floppy Disk</para></listitem></varlistentry>
      <varlistentry><term>floppy_zip</term><listitem><para>Zip Disk</para></listitem></varlistentry>
      <varlistentry><term>floppy_jaz</term><listitem><para>Jaz Disk</para></listitem></varlistentry>
      <varlistentry><term>optical</term><listitem><para>Optical Disc</para></listitem></varlistentry>
      <varlistentry><term>optical_cd</term><listitem><para>Compact Disc</para></listitem></varlistentry>
      <varlistentry><term>optical_cd_r</term><listitem><para>Compact Disc Recordable</para></listitem></varlistentry>
      <varlistentry><term>optical_cd_rw</term><listitem><para>Compact Disc Rewritable</para></listitem></varlistentry>
      <varlistentry><term>optical_dvd</term><listitem><para>Digital Versatile Disc</para></listitem></varlistentry>
      <varlistentry><term>optical_dvd_r</term><listitem><para>DVD-R</para></listitem></varlistentry>
      <varlistentry><term>optical_dvd_rw</term><listitem><para>DVD-RW</para></listitem></varlistentry>
      <varlistentry><term>optical_dvd_ram</term><listitem><para>DVD-RAM</para></listitem></varlistentry>
      <varlistentry><term>optical_dvd_plus_r</term><listitem><para>DVD+R</para></listitem></varlistentry>
      <varlistentry><term>optical_dvd_plus_rw</term><listitem><para>DVD+RW</para></listitem></varlistentry>
      <varlistentry><term>optical_dvd_plus_r_dl</term><listitem><para>DVD+R Dual Layer</para></listitem></varlistentry>
      <varlistentry><term>optical_dvd_plus_rw_dl</term><listitem><para>DVD+RW Dual Layer</para></listitem></varlistentry>
      <varlistentry><term>optical_bd</term><listitem><para>Blu-ray Disc</para></listitem></varlistentry>
      <varlistentry><term>optical_bd_r</term><listitem><para>Blu-ray Recordable</para></listitem></varlistentry>
      <varlistentry><term>optical_bd_re</term><listitem><para>Blu-ray Rewritable</para></listitem></varlistentry>
      <varlistentry><term>optical_hddvd</term><listitem><para>HD-DVD</para></listitem></varlistentry>
      <varlistentry><term>optical_hddvd_r</term><listitem><para>HD-DVD Recordable</para></listitem></varlistentry>
      <varlistentry><term>optical_hddvd_rw</term><listitem><para>HD-DVD Rewritable</para></listitem></varlistentry>
      <varlistentry><term>optical_mo</term><listitem><para>Magneto Optical</para></listitem></varlistentry>
      <varlistentry><term>optical_mrw</term><listitem><para>Can read Mount Rainer media</para></listitem></varlistentry>
      <varlistentry><term>optical_mrw_w</term><listitem><para>Can write Mount Rainer media</para></listitem></varlistentry>
      </variablelist>
    -->
    <property name="MediaCompatibility" type="as" access="read"/>

    <!-- MediaRemovable:
         Whether the media can be removed from the drive.

         Note that this may be overridden from what the hardware
         reports - for example, USB thumb drives often report that
         they are using removable media while in fact the media
         is not removable.
    -->
    <property name="MediaRemovable" type="b" access="read"/>

    <!-- MediaAvailable: Set to %FALSE if no medium is available.
         This is always %TRUE if #org.freedesktop.UDisks2.Drive:MediaChangeDetected is %FALSE.
    -->
    <property name="MediaAvailable" type="b" access="read"/>

    <!-- MediaChangeDetected: Set to %TRUE only if media changes are detected.
         Media changes are detected on all modern disk drives through
         either polling or an asynchronous notification mechanism. The
         only known disk drives that cannot report media changes are
         PC floppy drives.
    -->
    <property name="MediaChangeDetected" type="b" access="read"/>

    <!-- Size: The size of the drive (or the media currently in the drive).
         This is always 0 if #org.freedesktop.UDisks2.Drive:MediaChangeDetected is %FALSE.
    -->
    <property name="Size" type="t" access="read"/>

    <!-- TimeDetected: The time the drive was first detected.
         This is expressed in micro-seconds since the Epoch Jan 1, 1970 0:00 UTC.
    -->
    <property name="TimeDetected" type="t" access="read"/>

    <!-- TimeMediaDetected: The earliest time media was last detected or 0 if media is not available.
         This is expressed in micro-seconds since the Epoch Jan 1, 1970 0:00 UTC.
    -->
    <property name="TimeMediaDetected" type="t" access="read"/>

    <!-- Optical: %TRUE if the drive contains an optical disc. -->
    <property name="Optical" type="b" access="read"/>

    <!-- OpticalBlank: %TRUE if the disc is blank.
         This is only valid if the property #org.freedesktop.UDisks2.Drive:Optical is %TRUE.
      -->
    <property name="OpticalBlank" type="b" access="read"/>

    <!-- OpticalNumTracks: The number of tracks.
         This is only valid if the property #org.freedesktop.UDisks2.Drive:Optical is %TRUE.
      -->
    <property name="OpticalNumTracks" type="u" access="read"/>

    <!-- OpticalNumAudioTracks: The number of audio tracks.
         This is only valid if the property #org.freedesktop.UDisks2.Drive:Optical is %TRUE.
      -->
    <property name="OpticalNumAudioTracks" type="u" access="read"/>

    <!-- OpticalNumDataTracks: The number of data tracks.
         This is only valid if the property #org.freedesktop.UDisks2.Drive:Optical is %TRUE.
      -->
    <property name="OpticalNumDataTracks" type="u" access="read"/>

    <!-- OpticalNumSessions: The number of sessions.
         This is only valid if the property #org.freedesktop.UDisks2.Drive:Optical is %TRUE.
     -->
    <property name="OpticalNumSessions" type="u" access="read"/>

    <!-- RotationRate: The rotational rate of the drive.
      <itemizedlist>
        <listitem><para>-1 if known to be rotating media but rotation rate isn't known</para></listitem>
        <listitem><para>0 if known to be non-rotating media</para></listitem>
        <listitem><para>the rotation rate in rounds per minute otherwise</para></listitem>
      </itemizedlist>
    -->
    <property name="RotationRate" type="i" access="read"/>

    <!-- ConnectionBus:
      The physical connection bus used for the drive as seen by the
      user. This is typically used to draw a USB or Firewire emblem
      on top of an icon in an user interface.

      Note that this property has <emphasis>nothing</emphasis> to do
      with the low-level command-set used (such as ATA-8) or what
      low-level connection bus (such as SATA, eSATA, PATA, SAS2 etc)
      is used.

      Known values include:
      <variablelist>
      <varlistentry><term>usb</term><listitem><para>Connected via <ulink url="http://en.wikipedia.org/wiki/USB">USB</ulink></para></listitem></varlistentry>
      <varlistentry><term>sdio</term><listitem><para>Connected via <ulink url="http://en.wikipedia.org/wiki/Secure_Digital#SDIO">SDIO</ulink></para></listitem></varlistentry>
      <varlistentry><term>ieee1394</term><listitem><para>Connected via <ulink url="http://en.wikipedia.org/wiki/Firewire">Firewire</ulink></para></listitem></varlistentry>
      </variablelist>
    -->
    <property name="ConnectionBus" type="s" access="read"/>

    <!--
        Removable:
        A hint whether the drive and/or its media is considered
        <emphasis>removable</emphasis> by the user.

        This includes drives with removable media (cf. the
        #org.freedesktop.UDisks2.Drive:MediaRemovable property), Flash
        media such as SD cards and drives on hotpluggable buses such
        as USB or Firewire (cf. the
        #org.freedesktop.UDisks2.Drive:ConnectionBus property).

        Note that this is only a <emphasis>guess</emphasis>.
    -->
    <property name="Removable" type="b" access="read"/>

    <!-- Ejectable:
         Whether the media can be ejected from the drive or the drive
         accepts an eject command to switch its state so it displays
         e.g. a "Safe To Remove" message to the user.

         Note that this is only a <emphasis>guess</emphasis>.
    -->
    <property name="Ejectable" type="b" access="read"/>

    <!-- SortKey:
         A string that can be used for sorting drive objects.
    -->
    <property name="SortKey" type="s" access="read"/>

    <!--
        Eject:
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Ejects media from the drive. This is only meaningful to do on
        drives with removable media.

        There are not a lot of guarantees associated with this method
        so it should only be called in response to an user action.

        On some hardware the media may be physically ejected while on
        other hardware may simply eject the disc. On some hardware it
        may not do anything physical but it may cause e.g. a display
        on the hardware to show e.g. <quote>It is now safe to remove
        the device</quote>.
    -->
    <method name="Eject">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>
  </interface>

  <!--
    org.freedesktop.UDisks2.Drive.Ata:
    @short_description: Disk drive using the ATA command-set

    Objects implementing this interface also implement the
    #org.freedesktop.UDisks2.Drive interface.
  -->
  <interface name="org.freedesktop.UDisks2.Drive.Ata">
    <!-- SmartSupported: Whether the drive supports SMART. -->
    <property name="SmartSupported" type="b" access="read"/>

    <!-- SmartEnabled: Whether SMART is enabled. -->
    <property name="SmartEnabled" type="b" access="read"/>

    <!-- SmartUpdated:
         The point in time (seconds since the
         <ulink url="http://en.wikipedia.org/wiki/Unix_epoch">Unix Epoch</ulink>)
         that the SMART status was updated or 0 if never updated.

         The value of the other properties related to SMART are not
         meaningful if this proeprty is 0.
    -->
    <property name="SmartUpdated" type="t" access="read"/>

    <!-- SmartFailing:
         Set to %TRUE if disk is about to fail.

         This value is read from the disk itself and does not include
         any interpretation.
    -->
    <property name="SmartFailing" type="b" access="read"/>

    <!-- SmartPowerOnSeconds:
         The amount of time the disk has been powered on (according to SMART data) or 0 if unknown.
    -->
    <property name="SmartPowerOnSeconds" type="t" access="read"/>

    <!-- SmartTemperature:
         The temperature (in Kelvin) of the disk according to SMART data or 0 if unknown.
    -->
    <property name="SmartTemperature" type="d" access="read"/>

    <!--
        SmartNumAttributesFailing:
        The number of attributes failing right now or -1 if unknown.
    -->
    <property name="SmartNumAttributesFailing" type="i" access="read"/>

    <!--
        SmartNumAttributesFailedInThePast:
        The number of attributes that have failed in the past or -1 if unknown.
    -->
    <property name="SmartNumAttributesFailedInThePast" type="i" access="read"/>

    <!--
        SmartNumBadSectors:
        The number of bad sectors (ie. pending and reallocated) or -1 if unknown.
    -->
    <property name="SmartNumBadSectors" type="x" access="read"/>

    <!-- SmartSelftestStatus:
         The status of the last self-test. Known values include
        <variablelist>
        <varlistentry><term>success</term>
          <listitem><para>Last self-test was a success (or never ran).</para></listitem></varlistentry>
        <varlistentry><term>aborted</term>
          <listitem><para>Last self-test was aborted.</para></listitem></varlistentry>
        <varlistentry><term>interrupted</term>
          <listitem><para>Last self-test was interrupted.</para></listitem></varlistentry>
        <varlistentry><term>fatal</term>
          <listitem><para>Last self-test did not complete.</para></listitem></varlistentry>
        <varlistentry><term>error_unknown</term>
          <listitem><para>Last self-test failed (Unknown).</para></listitem></varlistentry>
        <varlistentry><term>error_electrical</term>
          <listitem><para>Last self-test failed (Electrical).</para></listitem></varlistentry>
        <varlistentry><term>error_servo</term>
          <listitem><para>Last self-test failed (Servo).</para></listitem></varlistentry>
        <varlistentry><term>error_read</term>
          <listitem><para>Last self-test failed (Read).</para></listitem></varlistentry>
        <varlistentry><term>error_handling</term>
          <listitem><para>Last self-test failed (Damage).</para></listitem></varlistentry>
        <varlistentry><term>inprogress</term>
          <listitem><para>Self-test is currently in progress.</para></listitem></varlistentry>
        </variablelist>
    -->
    <property name="SmartSelftestStatus" type="s" access="read"/>

    <!--
        SmartSelftestPercentRemaining:
        The percent remaining or -1 if unknown.
    -->
    <property name="SmartSelftestPercentRemaining" type="i" access="read"/>

    <!--
        SmartUpdate:
        @options: Options - known options (in addition to <link linkend="udisks-std-options">standard options</link>) includes <parameter>nowakeup</parameter> (of type 'b').

        Reads SMART data from the drive and update relevant properties.

        If the option @nowakeup is given and the disk is in a sleeping
        state, the error
        <literal>org.freedesktop.UDisks2.Error.WouldWakeup</literal> is
        returned.

        The option @atasmart_blob can be used to inject libatasmart
        compatible blobs for testing how clients react to different
        kinds of SMART data. Only uid 0 may use this. This option may
        be removed in the future with it being considered an ABI break
        - it only exists for testing purposes. Example:
<programlisting>
# export ATA_SMART_BLOB=/usr/share/doc/libatasmart-devel-0.17/Maxtor_96147H8-&#45;BAC51KJ0-&#45;2 ; \
  gdbus call -&#45;system -&#45;dest org.freedesktop.UDisks2 \
             -&#45;object-path /org/freedesktop/UDisks2/drives/WDC_WD1002FAEX_00Y9A0_WD_WCAW30039835 \
             -&#45;method org.freedesktop.UDisks2.Drive.Ata.SmartUpdate \
             "{'atasmart_blob': &#60;'$ATA_SMART_BLOB'&#62;}"
</programlisting>
    -->
    <method name="SmartUpdate">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!--
        SmartGetAttributes:
        @options: Options - known options (in addition to <link linkend="udisks-std-options">standard options</link>) includes <parameter>nowakeup</parameter> (of type 'b').
        @attributes: The SMART attributes.

        Get the SMART attributes.
        Each attribute is a struct with the following members:
        <variablelist>
        <varlistentry><term>id (type 'y')</term>
          <listitem><para>Attribute Identifier</para></listitem></varlistentry>
        <varlistentry><term>name (type 's')</term>
          <listitem><para>The identifier as a string.</para></listitem></varlistentry>
        <varlistentry><term>flags (type 'q')</term>
          <listitem><para>16-bit attribute flags (bit 0 is prefail/oldage, bit 1 is online/offline).</para></listitem></varlistentry>
        <varlistentry><term>value (type 'i')</term>
          <listitem><para>The current value or -1 if unknown.</para></listitem></varlistentry>
        <varlistentry><term>worst (type 'i')</term>
          <listitem><para>The worst value of -1 if unknown.</para></listitem></varlistentry>
        <varlistentry><term>threshold (type 'i')</term>
          <listitem><para>The threshold or -1 if unknown.</para></listitem></varlistentry>
        <varlistentry><term>pretty (type 'x')</term>
          <listitem><para>An interpretation of the value - must be ignored if @pretty_unit is 0.</para></listitem></varlistentry>
        <varlistentry><term>pretty_unit (type 'i')</term>
          <listitem><para>The unit of the @pretty value - the following units are known: 0 (unknown), 1 (dimensionless), 2 (milliseconds), 3 (sectors), 4 (millikelvin).</para></listitem></varlistentry>
        <varlistentry><term>expansion (type 'a{sv}')</term>
          <listitem><para>Currently unused. Intended for future expansion.</para></listitem></varlistentry>
        </variablelist>
        The @name parameter should be used as the authoritative identifier for the attribute since it is derived from the numerical @id and the disk's <literal>IDENTIFY</literal> data and thus handles ID collisions between drives of different make and model.
    -->
    <method name="SmartGetAttributes">
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="attributes" direction="out" type="a(ysqiiixia{sv})"/>
    </method>

    <!--
        SmartSelftestStart:
        @type: The type test to run.
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Starts a SMART selftest. The @type parameter is for the type
        of test to start - valid values are <literal>short</literal>,
        <literal>extended</literal> and <literal>conveyance</literal>.

        Note that the method returns immediately after the test has
        been started successfully.
    -->
    <method name="SmartSelftestStart">
      <arg name="type" direction="in" type="s"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!--
        SmartSelftestAbort:
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Aborts a running SMART selftest.
    -->
    <method name="SmartSelftestAbort">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

  </interface>

  <!-- ********************************************************************** -->

  <!--
    org.freedesktop.UDisks2.Block:
    @short_description: Low-level Block Device

    This interface represents a block device.

    This should not be confused with the
    #org.freedesktop.UDisks2.Drive interface that is used to represent
    disk drives. For example, the #org.freedesktop.UDisks2.Block
    interface is also used for block devices that do not correspond to
    drives at all (e.g. <ulink
    url="http://en.wikipedia.org/wiki/Loop_device">Loop
    Devices</ulink>).
  -->
  <interface name="org.freedesktop.UDisks2.Block">
    <!-- Device: The special device file for the block device e.g. <filename>/dev/sda2</filename>. -->
    <property name="Device" type="ay" access="read"/>

    <!-- PreferredDevice:
         The special device file to present in the UI instead of the value
         of the #org.freedesktop.UDisks2.Block:Device property.

         For example this could be
         e.g. <filename>/dev/mapper/mpathk</filename> for a multipath
         device with special device file <filename>/dev/dm-9</filename>.
    -->
    <property name="PreferredDevice" type="ay" access="read"/>

    <!-- Symlinks:

         Known symlinks in <filename>/dev</filename> that points to
         the device file in the
         #org.freedesktop.UDisks2.Block:Device property.

         For example, this array could include symlinks such as
         <filename>/dev/disk/by-id/ata-INTEL_SSDSA2MH080G1GC_CVEM842101HD080DGN</filename>
         and
         <filename>/dev/disk/by-id/wwn-0x5001517387d61905</filename>.
    -->
    <property name="Symlinks" type="aay" access="read"/>

    <!-- DeviceNumber: The dev_t of the block device. -->
    <property name="DeviceNumber" type="t" access="read"/>

    <!-- Size: The size of the block device. -->
    <property name="Size" type="t" access="read"/>

    <!-- ReadOnly: If %TRUE, the device can not be written to, only read from. -->
    <property name="ReadOnly" type="b" access="read"/>

    <!-- Drive:
         The #org.freedesktop.UDisks2.Drive object that the block device
         belongs to, or '/' if no such object exists.
      -->
    <property name="Drive" type="o" access="read"/>

    <!-- IdUsage:
         A result of probing for signatures on the block device. Known values include:
         <variablelist>
         <varlistentry>
           <term>filesystem</term>
           <listitem><para>Used for mountable filesystems</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>crypto</term>
           <listitem><para>Used for e.g. LUKS devices</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>raid</term>
           <listitem><para>Used for e.g. RAID members and LVM PVs</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>other</term>
           <listitem><para>Something else was detected.</para></listitem>
         </varlistentry>
         </variablelist>
         If blank, no known signature was detected. This doesn't
         necessarily mean the device contains no structured data; it
         only means that no signature known to the probing code was
         detected.

         Applications should not rely on the value in this or the
         #org.freedesktop.UDisks2.Block:IdType property - instead,
         applications should check for whether the object in question
         implements interfaces such as
         e.g. #org.freedesktop.UDisks2.Filesystem,
         #org.freedesktop.UDisks2.Swapspace or
         #org.freedesktop.UDisks2.Encrypted.
    -->
    <property name="IdUsage" type="s" access="read"/>

    <!--
        IdType:
        This property contains more information about the result of
        probing the block device. Its value depends of the value the
        #org.freedesktop.UDisks2.Block:IdUsage property:
        <variablelist>
        <varlistentry><term>filesystem</term>
          <listitem><para>The mountable file system that was detected (e.g. <literal>vfat</literal>).</para></listitem>
        </varlistentry>
        <varlistentry><term>crypto</term>
          <listitem><para>Encrypted data. Known values include <literal>crypto_LUKS</literal>.</para></listitem>
        </varlistentry>
        <varlistentry><term>raid</term>
          <listitem><para><ulink url="http://en.wikipedia.org/wiki/RAID">RAID</ulink> or similar. Known values include <literal>LVM2_member</literal> (for LVM2 components), <literal>linux_raid_member</literal> (for MD-RAID components.)</para></listitem>
        </varlistentry>
        <varlistentry><term>other</term>
          <listitem><para>Something else. Known values include <literal>swap</literal> (for swap space), <literal>suspend</literal> (data used when resuming from suspend-to-disk.</para></listitem>
        </varlistentry>
        </variablelist>
        See the note for the #org.freedesktop.UDisks2.Block:IdUsage property about usage.
    -->
    <property name="IdType" type="s" access="read"/>

    <!-- IdVersion:
         The version of the filesystem or other structured data on the block device.
         Do not make any assumptions about the format.

         This property is blank if there is no version or the version is unknown.
    -->
    <property name="IdVersion" type="s" access="read"/>
    <!-- IdLabel:
         The label of the filesystem or other structured data on the block device.

         This property is blank if there is no label or the label is unknown.
    -->
    <property name="IdLabel" type="ay" access="read"/>
    <!-- IdUUID:
         The <ulink url="http://en.wikipedia.org/wiki/UUID">UUID</ulink> of the
         filesystem or other structured data on the block device. Do not make
         any assumptions about the UUID as its format depends on what kind of
         data is on the device.

         This property is blank if there is no UUID or the UUID is unknown.
    -->
    <property name="IdUUID" type="ay" access="read"/>

    <!-- Configuration:
         The configuration for the device.

         This is an array of pairs of (@type, @details) where @type is
         a string identifying the configuration source
         (e.g. <literal>fstab</literal>) and @details contains the
         actual configuration data.

         Use the
         org.freedesktop.UDisks2.Block.AddConfigurationItem(),
         org.freedesktop.UDisks2.Block.RemoveConfigurationItem()
         and
         org.freedesktop.UDisks2.Block.UpdateConfigurationItem()
         methods to add, remove and update configuration items.

         Use
         org.freedesktop.UDisks2.Block.GetSecretConfiguration()
         to get the secrets (e.g. passphrases) that may be part of the
         configuration but isn't exported in this property for
         security reasons.

         For entries of type <literal>fstab</literal>, it means that
         the block device is referenced in the system-wide
         <filename>/etc/fstab</filename> file. Known configuration
         items for type <literal>fstab</literal> are
         <variablelist>
         <varlistentry>
           <term>fsname (type <literal>'ay'</literal>)</term>
           <listitem><para>The special device</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>dir (type <literal>'ay'</literal>)</term>
           <listitem><para>The mount point</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>type (type <literal>'ay'</literal>)</term>
           <listitem><para>The filesystem type</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>opts (type <literal>'ay'</literal>)</term>
           <listitem><para>Options</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>freq (type <literal>'i'</literal>)</term>
           <listitem><para>Dump frequency in days</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>passno (type <literal>'i'</literal>)</term>
           <listitem><para>Pass number of parallel fsck</para></listitem>
         </varlistentry>
         </variablelist>

         For entries of type <literal>crypttab</literal>, it means that
         the block device is referenced in the system-wide
         <filename>/etc/crypttab</filename> file. Known configuration
         items for type <literal>crypttab</literal> are
         <variablelist>
         <varlistentry>
           <term>name (type <literal>'ay'</literal>)</term>
           <listitem><para>The name to set the device up as</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>device (type <literal>'ay'</literal>)</term>
           <listitem><para>The special device</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>passphrase-path (type <literal>'ay'</literal>)</term>
           <listitem><para>Either empty to specify that no password is set,
           otherwise a path to a file containing the encryption password.
           This may also point to a special device file in <filename>/dev</filename>
           such as <literal>/dev/random</literal>.
           </para></listitem>
         </varlistentry>
         <varlistentry>
           <term>passphrase-contents (type <literal>'ay'</literal>)</term>
           <listitem><para>The contents of the file containing the encryption password, if applicable.
           This is only available via the org.freedesktop.UDisks2.Block.GetSecretConfiguration()
           method.</para></listitem>
         </varlistentry>
         <varlistentry>
           <term>opts (type <literal>'ay'</literal>)</term>
           <listitem><para>Options</para></listitem>
         </varlistentry>
         </variablelist>
         For security reasons, when creating a new
         <literal>crypttab</literal> entry (via the
         org.freedesktop.UDisks2.Block.AddConfigurationItem()
         method), then the <option>passphrase-path</option> must
         reference an unexisting file in the
         <filename>/etc/luks-keys</filename> directory.
    -->
    <property name="Configuration" type="a(sa{sv})" access="read"/>

    <!-- CryptoBackingDevice:
         The #org.freedesktop.UDisks2.Block object that is
         backing the device or <literal>/</literal> if unknown or if
         the block device is not the cleartext device for an encrypted
         device.
    -->
    <property name="CryptoBackingDevice" type="o" access="read"/>

    <!-- HintPartitionable:
         If %TRUE, the device is normally expected to be
         partitionable. Devices for which this is not the case include
         floppy drives, optical drives and LVM logical volumes.
    -->
    <property name="HintPartitionable" type="b" access="read"/>

    <!-- HintSystem: If %TRUE, the device is considered a <emphasis>system device</emphasis>.
         System devices are devices that require additional permissions to access.

         See <xref linkend="udisks.8"/> for how to influence the value of this property.
    -->
    <property name="HintSystem" type="b" access="read"/>

    <!-- HintIgnore: If %TRUE, the device should be hidden from users.

         See <xref linkend="udisks.8"/> for how to influence the value of this property.
    -->
    <property name="HintIgnore" type="b" access="read"/>

    <!-- HintAuto: If %TRUE, the device should be automatically started (e.g. mounted, unlocked etc.).

         See <xref linkend="udisks.8"/> for how to influence the value of this property.
    -->
    <property name="HintAuto" type="b" access="read"/>

    <!-- HintName: If not blank, the name to use when presenting the device.

         See <xref linkend="udisks.8"/> for how to influence the value of this property.
    -->
    <property name="HintName" type="s" access="read"/>

    <!-- HintIconName: If not blank, the icon name to use when presenting the device.
         The name must adhere to the
         <ulink url="http://www.freedesktop.org/wiki/Specifications/icon-theme-spec">freedesktop.org icon theme specification</ulink>.

         See <xref linkend="udisks.8"/> for how to influence the value of this property.
    -->
    <property name="HintIconName" type="s" access="read"/>

    <!--
        AddConfigurationItem:
        @item: The configuration item to add.
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Adds a new configuration item.

        See the #org.freedesktop.UDisks2.Block:Configuration
        property for details about valid configuration items.
    -->
    <method name="AddConfigurationItem">
      <arg name="item" direction="in" type="(sa{sv})"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!--
        RemoveConfigurationItem:
        @item: The configuration item to remove.
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Removes an existing configuration item.

        See the #org.freedesktop.UDisks2.Block:Configuration
        property for details about valid configuration items.
    -->
    <method name="RemoveConfigurationItem">
      <arg name="item" direction="in" type="(sa{sv})"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!--
        UpdateConfigurationItem:
        @old_item: The configuration item to remove.
        @new_item: The configuration item to add. Must be of the same type as @old_item.
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Removes a configuration item and adds a new one. This is
        equivalent to calling
        org.freedesktop.UDisks2.Block.RemoveConfigurationItem()
        followed by
        org.freedesktop.UDisks2.Block.AddConfigurationItem()
        with the change that only one PolicyKit check is made
        and that @new_item can be validated against @old_item.

        See the #org.freedesktop.UDisks2.Block:Configuration
        property for details about valid configuration items.
    -->
    <method name="UpdateConfigurationItem">
      <arg name="old_item" direction="in" type="(sa{sv})"/>
      <arg name="new_item" direction="in" type="(sa{sv})"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!--
        GetSecretConfiguration:
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).
        @configuration: The resulting configuration.

        Returns the same value as in the
        #org.freedesktop.UDisks2.Block:Configuration property
        but without secret information filtered out.
    -->
    <method name="GetSecretConfiguration">
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="configuration" direction="out" type="a(sa{sv})"/>
    </method>

    <!--
        Format:
        @type: The type of file system, partition table or other content to format the device with.
        @options: Options - known options (in addition to <link linkend="udisks-std-options">standard options</link>) includes <parameter>label</parameter> (of type 's'), <parameter>take-ownership</parameter> (of type 'b') and <parameter>encrypt.passphrase</parameter> (of type 's').

        Formats the device with a file system, partition table or
        other well-known content.

        Known values for @type includes <constant>empty</constant> (to
        just zero out areas of the device known to host file system
        signatures) and <constant>swap</constant> (Linux swap space)
        and most file systems supported by the <citerefentry><refentrytitle>mkfs</refentrytitle><manvolnum>8</manvolnum></citerefentry>
        program through its <option>-t</option> option.

        Known partition table formats includes
        <constant>dos</constant> and <constant>gpt</constant>.

        If @type supports it, you can specify a label with the
        <parameter>label</parameter> option in the @options parameter;
        however, note that this may not be supported on all file
        systems and, if supported, the maximum allowed length may
        vary.

        If the file system in question supports owners and the option
        <parameter>take-ownership</parameter> is set to %TRUE then the
        root directory of the created file system will be owned by the
        caller of this method.

        If the option <parameter>encrypt.passphrase</parameter> is
        given then a LUKS device is created with the given passphrase
        and the file system is created on the unlocked device. The
        unlocked device will be left open.
    -->
    <method name="Format">
      <arg name="type" direction="in" type="s"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!--
        OpenForBackup:
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).
        @fd: An index for the returned file descriptor.

        Gets a read-only file descriptor for the device intended for a
        byte-by-byte imaging of the device. This can only be done if
        the device is not already in use.
    -->
    <method name="OpenForBackup">
      <annotation name="org.gtk.GDBus.C.UnixFD" value="1"/>
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="fd" direction="out" type="h"/>
    </method>

    <!--
        OpenForRestore:
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).
        @fd: An index for the returned file descriptor.

        Gets a writable file descriptor for the device intended for a
        byte-by-byte restore of a disk image onto the device. This can
        only be done if the device is not already in use.
    -->
    <method name="OpenForRestore">
      <annotation name="org.gtk.GDBus.C.UnixFD" value="1"/>
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="fd" direction="out" type="h"/>
    </method>

  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.PartitionTable:
      @short_description: Block device containing a partition table

      This interface is used for #org.freedesktop.UDisks2.Block
      devices that contain a partition table.
  -->
  <interface name="org.freedesktop.UDisks2.PartitionTable">
    <!-- prereq: org.freedesktop.UDisks2.Block -->

    <!-- Type: The type of partition table detected.
         Known values include:
         <variablelist>
           <varlistentry><term>dos</term><listitem><para><ulink url="http://en.wikipedia.org/wiki/Master_Boot_Record">Master Boot Record</ulink></para></listitem></varlistentry>
           <varlistentry><term>gpt</term><listitem><para><ulink url="http://en.wikipedia.org/wiki/GUID_Partition_Table">GUID Partition Table</ulink></para></listitem></varlistentry>
         </variablelist>
         If blank it means that a partition table was detected but its
         scheme is unknown.
    -->
    <property name="Type" type="s" access="read"/>

    <!--
        CreatePartition:
        @offset: The desired offset where the partition should be created, in bytes.
        @size: The desired size of the partition, in bytes.
        @type: The type of partition to create (cf. the #org.freedesktop.UDisks2.Partition:Type property) or blank to use the default for the partition table type and OS.
        @name: The name for the new partition or blank if the partition table do not support names.
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).
        @created_partition: An object path to the created block device object implementing the #org.freedesktop.UDisks2.Partition interface.

        Creates a new partition.

        Note that the created partition won't necessarily be created
        at the exact @offset due to disk geometry and other alignment
        constraints (e.g. 1MiB alignment).

        The newly created partition may also end up being slightly
        larger or smaller than the requested @size bytes for the same
        reasons.

        The newly created partition will be wiped of known filesystem
        signatures using the
        <citerefentry><refentrytitle>wipefs</refentrytitle><manvolnum>8</manvolnum></citerefentry>
        command.
    -->
    <method name="CreatePartition">
      <arg name="offset" direction="in" type="t"/>
      <arg name="size" direction="in" type="t"/>
      <arg name="type" direction="in" type="s"/>
      <arg name="name" direction="in" type="s"/>
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="created_partition" direction="out" type="o"/>
    </method>
  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.Partition:
      @short_description: Block device representing a partition

      This interface is used for #org.freedesktop.UDisks2.Block
      devices that represent entries in a partition table.
  -->
  <interface name="org.freedesktop.UDisks2.Partition">
    <!-- prereq: org.freedesktop.UDisks2.Block -->

    <!-- Number: The number of the partition in the partition table. -->
    <property name="Number" type="u" access="read"/>

    <!-- Type: The type of the partition.

         For <literal>dos</literal> partition tables, this string is a
         hexadecimal number e.g. <literal>0x83</literal> or
         <literal>0xfd</literal>. For <literal>gpt</literal> partition
         tables this is the UUID
         e.g. <literal>ebd0a0a2-b9e5-4433-87c0-68b6b72699c7</literal>.
    -->
    <property name="Type" type="s" access="read"/>

    <!-- Flags: Flags describing the partition.

         Known flags for <literal>dos</literal> partitions include:
         <variablelist>
           <varlistentry><term>Bit 7</term><listitem><para>The partition is marked as bootable</para></listitem></varlistentry>
         </variablelist>
         Known flags for <literal>gpt</literal> partitions include:
         <variablelist>
           <varlistentry><term>Bit 0</term><listitem><para>System partition</para></listitem></varlistentry>
           <varlistentry><term>Bit 2</term><listitem><para>Legacy BIOS Bootable</para></listitem></varlistentry>
           <varlistentry><term>Bit 60</term><listitem><para>Read-only</para></listitem></varlistentry>
           <varlistentry><term>Bit 62</term><listitem><para>Hidden</para></listitem></varlistentry>
           <varlistentry><term>Bit 63</term><listitem><para>Do not automount</para></listitem></varlistentry>
         </variablelist>
    -->
    <property name="Flags" type="t" access="read"/>

    <!-- Offset: Offset of partition, in bytes. -->
    <property name="Offset" type="t" access="read"/>

    <!-- Size: Size of partition, in bytes. -->
    <property name="Size" type="t" access="read"/>

    <!-- Name: Label of partition or blank if not supported or unknown. -->
    <property name="Name" type="ay" access="read"/>

    <!-- UUID: The UUID of the partition or blank if not supported or unknown. -->
    <property name="UUID" type="ay" access="read"/>

    <!-- Table:
         The object path of the #org.freedesktop.UDisks2.PartitionTable
         object that the partition entry belongs to.
    -->
    <property name="Table" type="o" access="read"/>

    <!-- IsContainer:
         Set to %TRUE if the partition itself is a container for other
         partitions.

         For example, for <literal>dos</literal> partition tables,
         this applies to socalled <emphasis>extended partition</emphasis> (partitions of type
         <constant>0x05</constant>, <constant>0x0f</constant> or <constant>0x85</constant>)
         containing socalled <emphasis>logical partitions</emphasis>.
    -->
    <property name="IsContainer" type="b" access="read"/>

    <!-- IsContained:
         Set to %TRUE of the partition is contained in another partition.
         See the #org.freedesktop.UDisks2.Partition:IsContainer property for more information.
    -->
    <property name="IsContained" type="b" access="read"/>

    <!-- SetType:
         @type: New type to set.
         @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

         Sets the partition type. See the
         #org.freedesktop.UDisks2.Partition:Type property for a
         description of known partition types.
    -->
    <method name="SetType">
      <arg name="type" direction="in" type="s"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- SetName:
         @name: New name to set.
         @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

         Sets the partition name.
    -->
    <method name="SetName">
      <arg name="name" direction="in" type="s"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- SetFlags:
         @flags: New flags to set.
         @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

         Sets the partition flags. See the
         #org.freedesktop.UDisks2.Partition:Flags property for a
         description of known flags.
    -->
    <method name="SetFlags">
      <arg name="flags" direction="in" type="t"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- Delete:
         @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

         Deletes the partition.
    -->
    <method name="Delete">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>
  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.Filesystem:
      @short_description: Block device containing a mountable filesystem

      This interface is used for #org.freedesktop.UDisks2.Block
      devices that contain a mountable filesystem.
  -->
  <interface name="org.freedesktop.UDisks2.Filesystem">
    <!-- prereq: org.freedesktop.UDisks2.Block -->

    <!--
        SetLabel:
        @label: The label to set.
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Sets the filesystem label.
    -->
    <method name="SetLabel">
      <arg name="label" direction="in" type="ay"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- MountPoints:
         An array of filesystems paths for where the file system on
         the device is mounted. If the device is not mounted, this
         array is empty.
    -->
    <property name="MountPoints" type="aay" access="read"/>

    <!--
        Mount:
        @options: Options - known options (in addition to <link linkend="udisks-std-options">standard options</link>) includes <parameter>fstype</parameter> (of type 's') and <parameter>options</parameter> (of type 's').
        @mount_path: The filesystem path where the device was mounted.

        Mount a filesystem on the device.

        The directory the device will be mounted in is determined by
        looking at data related to the device (such the filesystem
        UUID and label) and will be created automatically. It is
        returned in @mount_path and is normally a sub-directory of
        <filename class='directory'>/media</filename>.

        The filesystem should be unmounted using the
        org.freedesktop.UDisks2.Filesystem.Unmount() method.

        If the device is removed without being unmounted (e.g. the
        user yanking the device or pulling the media out) or unmounted
        in a way that bypasses the
        org.freedesktop.UDisks2.Filesystem.Unmount() method
        (e.g. unmounted by the super-user by using the
        <citerefentry><refentrytitle>umount</refentrytitle><manvolnum>8</manvolnum></citerefentry>
        command directly), the device will be unmounted (if needed)
        and the mount point will be cleaned up.

        The file system type can be overridden with the
        <parameter>fstype</parameter> option and mount options can be
        given in <parameter>options</parameter> as a comma-separated
        string and is of the same format as would be passed to the
        <citerefentry><refentrytitle>mount</refentrytitle><manvolnum>8</manvolnum></citerefentry>
        command. Note that the mount options are validated - only a
        small subset per filesystem type is allowed.

        If the device in question is referenced in a system-wide
        configuration file (such as the <filename>/etc/fstab</filename> file)
        then the
        <citerefentry><refentrytitle>mount</refentrytitle><manvolnum>8</manvolnum></citerefentry>
        command is called directly as the calling user.
        If the calling user does not have sufficient permissions to
        mount the device (it could be the <literal>user</literal> or
        <literal>users</literal> option isn't specificed), then
        additional authorization is requested and, if obtained, the
        <citerefentry><refentrytitle>mount</refentrytitle><manvolnum>8</manvolnum></citerefentry>
        command is invoked as root.
        Additionally, the
        given <parameter>options</parameter> and
        <parameter>fstype</parameter> options are not used as they are
        instead read from the system-wide configuration file in
        question.
    -->
    <method name="Mount">
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="mount_path" direction="out" type="ay"/>
    </method>

    <!--
        Unmount:
        @options: Options - known options (in addition to <link linkend="udisks-std-options">standard options</link>) includes <parameter>force</parameter> (of type 'b').

        Unmount a mounted device.

        If the filesystem is busy, this operation fails with the error
        <link linkend="UDISKS-ERROR-DEVICE-BUSY:CAPS"><constant>org.freedesktop.UDisks2.Error.DeviceBusy</constant></link>
        unless the option <parameter>force</parameter> is used.

        If the device in question is referenced in a system-wide
        configuration file (such as the <filename>/etc/fstab</filename> file)
        then the
        <citerefentry><refentrytitle>umount</refentrytitle><manvolnum>8</manvolnum></citerefentry>
        command is called directly as the calling user.
        If the calling user does not have sufficient permissions to
        unmount the device (it could be the <literal>user</literal> or
        <literal>users</literal> option isn't specificed), then
        additional authorization is requested and, if obtained, the
        <citerefentry><refentrytitle>umount</refentrytitle><manvolnum>8</manvolnum></citerefentry>
        command is invoked as root.
    -->
<method name="Unmount">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>
  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.Swapspace:
      @short_description: Block device containing swap data

      This interface is used for #org.freedesktop.UDisks2.Block
      devices that contain swap space.
  -->
  <interface name="org.freedesktop.UDisks2.Swapspace">
    <!-- prereq: org.freedesktop.UDisks2.Block -->

    <!-- Active: Set to %TRUE if the device is currently in use by the OS. -->
    <property name="Active" type="b" access="read"/>

    <!--
        Start:
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Activates the swap device.
    -->
    <method name="Start">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!--
        Stop:
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Deactivates the swap device.
    -->
    <method name="Stop">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>
  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.Encrypted:
      @short_description: Block device containing encrypted data

      This interface is used for #org.freedesktop.UDisks2.Block
      devices that contain encrypted data.
  -->
  <interface name="org.freedesktop.UDisks2.Encrypted">
    <!-- prereq: org.freedesktop.UDisks2.Block -->

    <!--
        Unlock:
        @passphrase: The passphrase to use.
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).
        @cleartext_device: An object path to the unlocked object implementing the #org.freedesktop.UDisks2.Block interface.

        Tries to unlock the encrypted device using @passphrase.

        If the device in question is referenced in a system-wide
        configuration file (such as the <filename>/etc/crypttab</filename> file),
        then name, options and passphrase (if available) is used from that
        file after requesting additional authorization.

        If the device is removed without being locked (e.g. the user
        yanking the device or pulling the media out) the cleartext
        device will be cleaned up.
    -->
    <method name="Unlock">
      <arg name="passphrase" direction="in" type="ay"/>
      <arg name="options" direction="in" type="a{sv}"/>
      <arg name="cleartext_device" direction="out" type="o"/>
    </method>

    <!--
        Lock:
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Locks the encrypted device.
    -->
    <method name="Lock">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!--
        ChangePassphrase:
        @passphrase: The existing passphrase.
        @new_passphrase: The new passphrase to use.
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Changes the passphrase to @new_passphrase. An existing passphrase is required.

        If the device in question is referenced in a system-wide
        configuration file (such as the
        <filename>/etc/crypttab</filename> file) and this
        configuration references the passphrase, it is not
        automatically updated.
    -->
    <method name="ChangePassphrase">
      <arg name="passphrase" direction="in" type="ay"/>
      <arg name="new_passphrase" direction="in" type="ay"/>
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.Loop:
      @short_description: Block device backed by a file

      This interface is used for #org.freedesktop.UDisks2.Block
      devices that are loop devices.
  -->
  <interface name="org.freedesktop.UDisks2.Loop">
    <!-- prereq: org.freedesktop.UDisks2.Block -->

    <!--
        Delete:
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Deletes the loop device.
    -->
    <method name="Delete">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!-- BackingFile:
         A path to the file that is backing the block device or blank
         if unknown.
    -->
    <property name="BackingFile" type="ay" access="read"/>
  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.Job:
      @short_description: Long-running tasks

      This interface is used for long-running tasks.
  -->
  <interface name="org.freedesktop.UDisks2.Job">

    <!-- Progress: How much progress has been made. Values are in the range 0 to 1. -->
    <property name="Progress" type="d" access="read"/>
    <!-- StartTime:

         The point in time (seconds since the <ulink
         url="http://en.wikipedia.org/wiki/Unix_epoch">Unix
         Epoch</ulink>) that the job was started.
    -->
    <property name="StartTime" type="t" access="read"/>
    <!-- ExpectedEndTime:

         The expected point in time (seconds since the <ulink
         url="http://en.wikipedia.org/wiki/Unix_epoch">Unix
         Epoch</ulink>) that the job will complete.
    -->
    <property name="ExpectedEndTime" type="t" access="read"/>

    <!-- Objects: The objects that the job is related to, if any. -->
    <property name="Objects" type="ao" access="read"/>

    <!--
        Cancel:
        @options: Options (currently unused except for <link linkend="udisks-std-options">standard options</link>).

        Cancels the job.
    -->
    <method name="Cancel">
      <arg name="options" direction="in" type="a{sv}"/>
    </method>

    <!--
        Completed:
        @success: If %TRUE, the job completed successfully.
        @message: A message describing the completion of the job, e.g. an error message.

        Emitted when a job completes.
    -->
    <signal name="Completed">
      <arg name="success" type="b"/>
      <arg name="message" type="s"/>
    </signal>
  </interface>

  <!-- ********************************************************************** -->

</node>
